"""
    User profile
""" 

from flask import Blueprint
import gaesessions
import logging
from google.appengine.ext import db
from datetime import datetime, timedelta

PROFILE_KEY = 'PK_prof_id'
UPDATE_INTERVAL = timedelta(minutes=10)

KEY_DELIMITER = '!'
KEY_PATTERN = '%s' + KEY_DELIMITER + '%s'

class AuthMethod(object):
    
    def get_profile_key(self):
        pass
    
    def logout(self):
        pass
    
    def populate_profile(self, profile):
        pass


class CookieSession(AuthMethod):
    def get_profile_key(self):
        session = gaesessions.get_current_session()
        if session.has_key(PROFILE_KEY):
            return session[PROFILE_KEY]
        else:
            return None

    def logout(self):
        gaesessions.get_current_session().terminate()
        
    def populate_profile(self, profile):
        pass


class ProfilesBlueprint(Blueprint):

    methods = None
    default_method = CookieSession()

    def __init__(self, methods, *args, **kwargs):
        self.methods = methods
        Blueprint.__init__(self, *args, **kwargs)

    def find_profile_key(self):
        for k, v in self.methods.iteritems():
            pk = v.get_profile_key()
            if pk:
                return self.serialize_key(k, pk)
        return self.default_method.get_profile_key()
    
    def update_session_key(self, profile_key):
        session = gaesessions.get_current_session()
        session[PROFILE_KEY] = profile_key

    def current_profile(self):
        key = self.find_profile_key()
        profile = None
        if key != None:
            profile = self.load_or_create_profile(key)
        else:
            # Profile wasn't found - create one.
            profile = self.create_guest_profile()
                
        return profile
    
    def create_guest_profile(self):
        profile = Profile()
        profile.put()
        profile.name = 'Guest ' + str(profile.get_id())
        profile.first_name = 'Guest'
        profile.dirty = True
        self.update_session_key(profile.get_id())
        return profile
    
    def login(self, method=None):
        if method:
            key = self.methods[method].get_profile_key()
        else:
            key = self.find_profile_key()
        if key & self.load_profile(key):
            self.update_session_key(key)
            
    def serialize_key(self, method, key):
        return KEY_PATTERN % (method, key)
    
    def deserialize_key(self, key):
        str_key = str(key)
        indx = str_key.find(KEY_DELIMITER)
        if indx < 0:
            return ('', key)
        else:
            return (str_key[:indx], str_key[indx + len(KEY_DELIMITER):])
    
    def load_or_create_profile(self, key):
        if isinstance(key, (int, long)):
            profile = Profile.get_by_id(key)
        else:
            profile = Profile.get_or_insert(key)
        if profile.last_login_time == None:
            self.get_method(key).populate_profile(profile)
        return profile
    
    def get_method(self, key):
        mk = self.deserialize_key(key)
        if mk[0] == '':
            return self.default_method
        else:
            return self.methods[mk[0]]
        
            
gaeprofiles = ProfilesBlueprint({}, 'gaeprofiles', __name__)

@gaeprofiles.after_app_request
def persist_profile(response):
    gaeprofiles.current_profile().save()
    return response


class Profile(db.Expando):
    
    first_name = db.StringProperty()
    name = db.StringProperty()
    last_login_time = db.DateTimeProperty()

    dirty = False
    
    def get_first_name(self):
        if self.first_name != None:
            return self.first_name
        else:
            return self.name
    
    def save(self):
        if not self.dirty and self.is_too_old():
            self.dirty = True
            self.last_login_time = datetime.utcnow()
        if self.dirty:
            self.put()
            self.dirty = False
    
    def is_too_old(self):
        if self.last_login_time == None:
            return True
        delta = datetime.utcnow() - self.last_login_time
        return delta > UPDATE_INTERVAL
    
    def get_id(self):
        return self.key().id_or_name()
    
    def debug_dump(self):
        return 'Profile summary: id %s, fn %s; ln %s; bd %s; ll %s;' % \
            (self.get_id(),
             self.first_name, 
             self.name, 
             self.last_login_time,
            )
    
    def is_guest(self):
        # Id has no delimiter - it is generated by the AppEngine
        return self.get_id().find(KEY_DELIMITER) == 0

